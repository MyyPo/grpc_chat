//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BlacklistedTokens = newBlacklistedTokensTable("public", "blacklisted_tokens", "")

type blacklistedTokensTable struct {
	postgres.Table

	//Columns
	Value postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BlacklistedTokensTable struct {
	blacklistedTokensTable

	EXCLUDED blacklistedTokensTable
}

// AS creates new BlacklistedTokensTable with assigned alias
func (a BlacklistedTokensTable) AS(alias string) *BlacklistedTokensTable {
	return newBlacklistedTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlacklistedTokensTable with assigned schema name
func (a BlacklistedTokensTable) FromSchema(schemaName string) *BlacklistedTokensTable {
	return newBlacklistedTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlacklistedTokensTable with assigned table prefix
func (a BlacklistedTokensTable) WithPrefix(prefix string) *BlacklistedTokensTable {
	return newBlacklistedTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlacklistedTokensTable with assigned table suffix
func (a BlacklistedTokensTable) WithSuffix(suffix string) *BlacklistedTokensTable {
	return newBlacklistedTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlacklistedTokensTable(schemaName, tableName, alias string) *BlacklistedTokensTable {
	return &BlacklistedTokensTable{
		blacklistedTokensTable: newBlacklistedTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newBlacklistedTokensTableImpl("", "excluded", ""),
	}
}

func newBlacklistedTokensTableImpl(schemaName, tableName, alias string) blacklistedTokensTable {
	var (
		ValueColumn    = postgres.StringColumn("value")
		allColumns     = postgres.ColumnList{ValueColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return blacklistedTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Value: ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
